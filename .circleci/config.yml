# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  browser-tools: circleci/browser-tools@1.4.0
  allure: ayte/allure@0.1.3
  slack: circleci/slack@4.10.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.9.10-browsers
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "<!channel> :arrow_forward: *TESTS HAS BEEN STARTED*. \nWait for the finish notification."
                  }
                }
              ]
            }
          event: always

      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - allure/install
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.

      - run:
          name: install my own pattern for notifications
          command: |
            echo 'export FAILED_TEMPLATE=$(cat .circleci/FailedTemplate.json)' >> $BASH_ENV
            echo 'export SUCCESS_TEMPLATE=$(cat .circleci/SuccessTemplate.json)' >> $BASH_ENV

      - run:
          name: upgrade webdriver manager
          # This assumes pytest is installed via the install-package step above
          command: | 
            pip install webdriver-manager -U
            google-chrome --version

      - run:
          name: run tests
          command: pytest --alluredir=allure-results

      - run:
          name: generate allure report
          command: allure generate --clean --output allure-report
          when: always

      - store_artifacts:
          path: /home/circleci/project/allure-report

      - slack/notify:
          event: fail
          template: FAILED_TEMPLATE
      - slack/notify:
          event: pass
          template: SUCCESS_TEMPLATE

  check-2nd-job:
    docker:
      - image: cimg/python:3.9.10-browsers
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - allure/install
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.

      - run:
          name: install my own pattern for notifications
          command: |
            echo 'export FAILED_TEMPLATE=$(cat .circleci/FailedTemplate.json)' >> $BASH_ENV
            echo 'export SUCCESS_TEMPLATE=$(cat .circleci/SuccessTemplate.json)' >> $BASH_ENV

#      - run:
#          name: install my own pattern for notifications
#          command: echo ${MY_ORB_TEMPLATE}

      - run:
          name: upgrade webdriver manager
          command: |
            pip install webdriver-manager -U
            google-chrome --version

      - run:
          name: run tests
          command: pytest  tests/test_file.py --alluredir=allure-results

      - run:
          name: generate allure report
          command: allure generate --clean --output allure-report1
          when: always

      - store_artifacts:
          path: /home/circleci/project/allure-report1

      - slack/notify:
          event: fail
          template: FAILED_TEMPLATE
      - slack/notify:
          event: pass
          template: SUCCESS_TEMPLATE

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:

  version: 2

  sample:
                # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test:
          context: slack-secrets
#    triggers:
#      - schedule:
#          cron: "19 7 * * *"
#          filters:
#            branches:
#              only:
#                - test_branch
  2ndworkflow:
#    triggers:
#      - schedule:
#          cron: "19 7 * * *"
#          filters:
#            branches:
#              only:
#                - test_branch
    jobs:
      - check-2nd-job:
          context: slack-secrets
#          type: approval
#      - check-2nd-job:
#          requires:
#            - check-2nd-job
#          context: slack-secrets


